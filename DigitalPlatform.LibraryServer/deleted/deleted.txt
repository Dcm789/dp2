

#if NOOOO
                // 启动TraceDTLP

                // 从断点记忆文件中读出信息
                // return:
                //      -1  error
                //      0   file not found
                //      1   found
                nRet = ReadBatchTaskBreakPointFile("跟踪DTLP数据库",
                    out strBreakPoint,
                    out strError);
                if (nRet == -1)
                {
                    app.WriteErrorLog("ReadBatchTaskBreakPointFile时出错：" + strError);
                }
                // 如果nRet == 0，表示没有断点文件存在，也就不必自动启动这个任务

                // strBreakPoint并未被使用。而是断点文件是否存在，这一信息有价值。

                if (nRet == 1)
                {
                    try
                    {

                        // 从断点文件中取出断点字符串
                        // 断点字符串格式：序号.偏移量@日志文件名
                        //  或者：序号@日志文件名
                        // 获得断点信息的整个过程的代码，是否适宜归入TraceDTLP类？
                        // 如果成熟，可以归纳作为BatchTask基类的一个特性。

                        TraceDTLP tracedtlp = new TraceDTLP(this, null);
                        this.BatchTasks.Add(tracedtlp);

                        if (tracedtlp.StartInfo == null)
                            tracedtlp.StartInfo = new BatchTaskStartInfo();   // 按照缺省值来
                        tracedtlp.StartInfo.Start = "!breakpoint";  //strBreakPoint;
                        tracedtlp.ClearProgressFile();   // 清除进度文件内容
                        tracedtlp.StartWorkerThread();
                    }
                    catch (Exception ex)
                    {
                        app.WriteErrorLog("启动批处理任务时出错：" + ex.Message);
                        goto ERROR1;
                    }
                }

#endif



#if NO
                        bool bLoop = false;
                        string strLastNumber = "";

                        // return:
                        //      -1  出错
                        //      0   没有找到断点信息
                        //      1   找到了断点信息
                        nRet = patron_rep.ReadLastNumber(
                            out bLoop,
                            out strLastNumber,
                            out strError);
                        if (nRet == -1)
                        {
                            app.WriteErrorLog("ReadLastNumber时出错：" + strError);
                        }

                        if (patron_rep.StartInfo == null)
                            patron_rep.StartInfo = new BatchTaskStartInfo();   // 按照缺省值来

                        if (bLoop == true)
                        {
                            // 需要从断点启动
                            if (nRet == 1)
                                patron_rep.StartInfo.Start = "!breakpoint";  //strBreakPoint;

                            patron_rep.ClearProgressFile();   // 清除进度文件内容
                            patron_rep.StartWorkerThread();
                        }
#endif

        // 列出 书目库/读者库/订购库/期库/评注库/发票库/违约金库/预约到书库 检索途径信息
        // parameters:
        //      strLang 语言代码。一般为"zh"
        //      infos   返回检索途径信息数组
        // rights:
        //      需要 listbibliodbfroms 或 listdbfroms 或 order 权限
        // return:
        //      result.Value    -1 出错；0 当前系统中没有定义此类数据库; 1: 成功(有至少一个此类数据库)
        public LibraryServerResult ListBiblioDbFroms(
            string strDbType,
            string strLang,
            out BiblioDbFromInfo[] infos)
        {
            infos = null;

            string strError = "";

            LibraryServerResult result = this.PrepareEnvironment("ListBiblioDbFroms", true, true);
            if (result.Value == -1)
                return result;

            try
            {
                // 权限判断

                // 权限字符串
                if (StringUtil.IsInList("listbibliodbfroms", sessioninfo.RightsOrigin) == false
                    && StringUtil.IsInList("listdbfroms", sessioninfo.RightsOrigin) == false
                    && StringUtil.IsInList("order", sessioninfo.RightsOrigin) == false)
                {
                    result.Value = -1;
                    result.ErrorInfo = "列出书目库检索途径 被拒绝。不具备order或listbibliodbfroms或listdbfroms权限。";
                    result.ErrorCode = ErrorCode.AccessDenied;
                    return result;
                }

                strError = EnsureKdbs(false);
                if (strError != null)
                    goto ERROR1;

                if (string.IsNullOrEmpty(strDbType) == true)
                    strDbType = "biblio";

                // long lRet = 0;

                List<string> dbnames = null;
                if (strDbType == "reader")
                {
                    dbnames = app.GetCurrentReaderDbNameList(sessioninfo.LibraryCodeList);
                }
                else
                {
                    int nRet = app.GetDbNames(
                        strDbType,
                        out dbnames,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                }

#if NO
                List<string> dbnames = new List<string>();

                string strDbTypeName = "";

                if (strDbType == "biblio")
                {
                    strDbTypeName = "书目";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 实体库对应的书目库名
                        string strBiblioDbName = app.ItemDbs[i].BiblioDbName;

                        if (String.IsNullOrEmpty(strBiblioDbName) == false)
                            dbnames.Add(strBiblioDbName);
                    }
                }
                else if (strDbType == "reader")
                {
                    strDbTypeName = "读者";
                    dbnames = app.GetCurrentReaderDbNameList(sessioninfo.LibraryCodeList);
                }
                else if (strDbType == "item")   // 2012/5/5
                {
                    strDbTypeName = "实体";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 实体库名
                        string strItemDbName = app.ItemDbs[i].DbName;

                        if (String.IsNullOrEmpty(strItemDbName) == false)
                            dbnames.Add(strItemDbName);
                    }
                }
                else if (strDbType == "issue")   // 2012/5/5
                {
                    strDbTypeName = "期";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 期库名
                        string strIssueDbName = app.ItemDbs[i].IssueDbName;

                        if (String.IsNullOrEmpty(strIssueDbName) == false)
                            dbnames.Add(strIssueDbName);
                    }
                }
                else if (strDbType == "order")   // 2012/5/5
                {
                    strDbTypeName = "订购";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 订购库名
                        string strOrderDbName = app.ItemDbs[i].OrderDbName;

                        if (String.IsNullOrEmpty(strOrderDbName) == false)
                            dbnames.Add(strOrderDbName);
                    }
                }
                else if (strDbType == "comment")   // 2012/5/5
                {
                    strDbTypeName = "评注";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 实体库名
                        string strCommentDbName = app.ItemDbs[i].CommentDbName;

                        if (String.IsNullOrEmpty(strCommentDbName) == false)
                            dbnames.Add(strCommentDbName);
                    }
                }
                else if (strDbType == "invoice")
                {
                    strDbTypeName = "发票";
                    if (string.IsNullOrEmpty(app.InvoiceDbName) == false)
                        dbnames.Add(app.InvoiceDbName);
                }
                else if (strDbType == "amerce")
                {
                    strDbTypeName = "违约金";
                    if (string.IsNullOrEmpty(app.AmerceDbName) == false)
                        dbnames.Add(app.AmerceDbName);
                }
                else
                {
                    strError = "未知的数据库类型 '"+strDbType+"'。应为biblio reader item issue order comment invoice amerce之一";
                    goto ERROR1;
                }
#endif

                StringUtil.RemoveDupNoSort(ref dbnames);

                if (dbnames.Count == 0)
                {
                    result.Value = 0;
                    result.ErrorInfo = "当前系统中没有定义此类数据库，所以无法获知其检索途径信息";

                    return result;
                }

                // 可以当时现列出，并不存储?
                // 不存储的缺点是，等到发出检索式的时候，就不知道哪个库有哪些style值了。
                // 后退一步：caption可以现列出，但是style值需要预先初始化和存储起来，供检索时构造检索式用
                List<From> froms = new List<From>();

                for (int i = 0; i < dbnames.Count; i++)
                {
                    string strDbName = dbnames[i];

                    if (String.IsNullOrEmpty(strDbName) == true)
                    {
                        Debug.Assert(false, "");
                        continue;
                    }

                    /*
                    // 2011/12/17
                    if (app.kdbs == null)
                    {
                        app.ActivateManagerThreadForLoad();
                        strError = "app.kdbs == null。故障原因请检查dp2Library日志";
                        goto ERROR1;
                    }
                     * */

                    KernelDbInfo db = app.kdbs.FindDb(strDbName);

                    if (db == null)
                    {
                        strError = "kdbs中没有关于"+LibraryApplication.GetDbTypeName(strDbType)+"数据库 '" + strDbName + "' 的信息";
                        goto ERROR1;
                    }

                    // 把所有库的from累加起来
                    froms.AddRange(db.Froms);
                }

                // 根据style值去重
                if (dbnames.Count > 1)
                {
                    if (strDbType != "biblio")
                        KernelDbInfoCollection.RemoveDupByCaption(ref froms,
                            strLang);
                    else
                        KernelDbInfoCollection.RemoveDupByStyle(ref froms);
                }

                List<BiblioDbFromInfo> info_list = new List<BiblioDbFromInfo>();

                int nIndexOfID = -1;    // __id途径所在的下标

                for (int i = 0; i < froms.Count; i++)
                {
                    From from = froms[i];

                    Caption caption = from.GetCaption(strLang);
                    if (caption == null)
                    {
                        caption = from.GetCaption(null);
                        if (caption == null)
                        {
                            strError = "有一个from事项的captions不正常";
                            goto ERROR1;
                        }
                    }

                    if (caption.Value == "__id")
                        nIndexOfID = i;

                    BiblioDbFromInfo info = new BiblioDbFromInfo();
                    info.Caption = caption.Value;
                    info.Style = from.Styles;

                    info_list.Add(info);
                }

                // 如果曾经出现过 __id caption
                if (nIndexOfID != -1)
                {
                    BiblioDbFromInfo temp = info_list[nIndexOfID];
                    info_list.RemoveAt(nIndexOfID);
                    info_list.Add(temp);
                }

                infos = new BiblioDbFromInfo[info_list.Count];
                info_list.CopyTo(infos);

                result.Value = 1;
                result.ErrorInfo = "";

                return result;
                /*
            ERROR1:
                result.Value = -1;
                result.ErrorInfo = strError;
                result.ErrorCode = ErrorCode.SystemError;
                return result;
                 * */
            }
            catch (Exception ex)
            {
                string strErrorText = "dp2Library ListBiblioDbFroms() API出现异常: " + ExceptionUtil.GetDebugText(ex);
                app.WriteErrorLog(strErrorText);

                result.Value = -1;
                result.ErrorCode = ErrorCode.SystemError;
                result.ErrorInfo = strErrorText;
                return result;
            }
        ERROR1:
            result.Value = -1;
            result.ErrorInfo = strError;
            result.ErrorCode = ErrorCode.SystemError;
            return result;
        }

		~~~

		        // 根据源代码文件获得Xml到Html转换的Assembly对象
        public int GetXml2HtmlAssembly(
            string strCodeFileName,
            string strRefFileName,
            string strBinDir,
            out Assembly assembly,
            out string strError)
        {
            strError = "";
            assembly = null;
            int nRet = 0;

#if NO
            // 看看是否已经存在
            this.m_lockXml2HtmlAssemblyTable.AcquireReaderLock(m_nLockTimeout);
            try
            {
                assembly = (Assembly)this.Xml2HtmlAssemblyTable[strCodeFileName.ToLower()];
            }
            finally
            {
                this.m_lockXml2HtmlAssemblyTable.ReleaseReaderLock();
            }
#endif
            assembly = this.AssemblyCache.FindObject(strCodeFileName);

            // 优化
            if (assembly != null)
                return 1;

            string strCode = "";    // c#代码

            // 装入code?
            try
            {
                using (StreamReader sr = new StreamReader(strCodeFileName, true))
                {
                    strCode = sr.ReadToEnd();
                }
            }
            catch (Exception ex)
            {
                strError = ExceptionUtil.GetAutoText(ex);
                return -1;
            }

            string[] saAddRef1 = {

                                    // 2011/9/3 增加
                                    "system.dll",
                                    "system.drawing.dll",
                                    "system.web.dll",
                                    "system.xml.dll",
                                    "System.Runtime.Serialization.dll",

										 strBinDir + "\\digitalplatform.marcdom.dll",
										 strBinDir + "\\digitalplatform.marckernel.dll",
										 strBinDir + "\\digitalplatform.rms.client.dll",
										 strBinDir + "\\digitalplatform.libraryserver.dll",
										 strBinDir + "\\digitalplatform.dll",
										 strBinDir + "\\digitalplatform.Text.dll",
										 strBinDir + "\\digitalplatform.IO.dll",
										 strBinDir + "\\digitalplatform.Xml.dll",
										 // strBinDir + "\\dp2rms.exe",
										 };

            string strWarning = "";
            string strLibPaths = "";

            string[] saRef2 = null;

            if (String.IsNullOrEmpty(strRefFileName) == false)
            {
                // 从references.xml文件中得到refs字符串数组
                // return:
                //		-1	error
                //		0	not found file
                //		1	found file
                nRet = ScriptManager.GetRefs(strRefFileName,
                    out saRef2,
                    out strError);
                if (nRet == -1)
                {
                    strError = "ref文件 '" + strRefFileName + "' 出错: " + strError;
                    return -1;
                }
            }

            string[] saRef = null;
            if (saRef2 != null)
            {
                saRef = new string[saRef2.Length + saAddRef1.Length];
                Array.Copy(saRef2, saRef, saRef2.Length);
                Array.Copy(saAddRef1, 0, saRef, saRef2.Length, saAddRef1.Length);
            }
            else
                saRef = saAddRef1;

            // 创建Script的Assembly
            // 本函数内对saRef不再进行宏替换
            nRet = ScriptManager.CreateAssembly_1(strCode,
                saRef,
                strLibPaths,
                out assembly,
                out strError,
                out strWarning);

            if (nRet == -2)
                goto ERROR1;
            if (nRet == -1)
            {
                strError = "文件 '" + strCodeFileName + "' 编译出错: " + strError;
                if (strWarning == "")
                {
                    goto ERROR1;
                }
                // MessageBox.Show(this, strWarning);

            }

#if NO
            // 加入hashtable
            this.m_lockXml2HtmlAssemblyTable.AcquireWriterLock(m_nLockTimeout);
            try
            {
                this.Xml2HtmlAssemblyTable[strCodeFileName.ToLower()] = assembly;
            }
            finally
            {
                this.m_lockXml2HtmlAssemblyTable.ReleaseWriterLock();
            }
#endif
            this.AssemblyCache.SetObject(strCodeFileName, assembly);
            return 0;
        ERROR1:
            return -1;
        }


		~~~

		        public int PrepareMarcFilter(
            string strFilterFileName,
            out LoanFilterDocument filter,
            out string strError)
        {
            strError = "";

            // 看看是否有现成可用的对象
            filter = (LoanFilterDocument)this.Filters.GetFilter(strFilterFileName);

            if (filter != null)
            {
                // filter.FilterHost = host;
                return 1;
            }

            // 新创建
            // string strFilterFileContent = "";

            filter = new LoanFilterDocument();

            // filter.FilterHost = host;
            filter.strOtherDef = "FilterHost Host = null;";

            filter.strPreInitial = " LoanFilterDocument doc = (LoanFilterDocument)this.Document;\r\n";
            filter.strPreInitial += " Host = ("
                + "FilterHost" + ")doc.FilterHost;\r\n";

            try
            {
                filter.Load(strFilterFileName);
            }
            catch (Exception ex)
            {
                strError = ExceptionUtil.GetAutoText(ex);
                return -1;
            }

            string strCode = "";    // c#代码

            int nRet = filter.BuildScriptFile(out strCode,
                out strError);
            if (nRet == -1)
                goto ERROR1;

            Assembly assembly = null;
            assembly = this.AssemblyCache.FindObject(strFilterFileName);
            if (assembly != null)
            {
                filter.Assembly = assembly;
                return 0;
            }

            string[] saAddRef1 = {
                                    // 2011/9/3 增加
                                    "system.dll",
                                    "system.drawing.dll",
                                    "system.web.dll",
                                    "system.xml.dll",
                                    "System.Runtime.Serialization.dll",

										 this.BinDir + "\\digitalplatform.marcdom.dll",
										 this.BinDir + "\\digitalplatform.marckernel.dll",
										 this.BinDir + "\\digitalplatform.libraryserver.dll",
										 this.BinDir + "\\digitalplatform.dll",
										 this.BinDir + "\\digitalplatform.Text.dll",
										 this.BinDir + "\\digitalplatform.IO.dll",
										 this.BinDir + "\\digitalplatform.Xml.dll",
										 this.BinDir + "\\digitalplatform.script.dll",
										 this.BinDir + "\\digitalplatform.marcquery.dll",
										 /*strMainCsDllName*/ };

            string strWarning = "";
            string strLibPaths = "";

            string[] saRef2 = filter.GetRefs();

            string[] saRef = new string[saRef2.Length + saAddRef1.Length];
            Array.Copy(saRef2, saRef, saRef2.Length);
            Array.Copy(saAddRef1, 0, saRef, saRef2.Length, saAddRef1.Length);

            // 创建Script的Assembly
            // 本函数内对saRef不再进行宏替换
            nRet = ScriptManager.CreateAssembly_1(strCode,
                saRef,
                strLibPaths,
                out assembly,
                out strError,
                out strWarning);
            if (nRet == -2)
                goto ERROR1;
            if (nRet == -1)
            {
                if (strWarning == "")
                {
                    goto ERROR1;
                }
                // MessageBox.Show(this, strWarning);
            }

            filter.Assembly = assembly;
            this.AssemblyCache.SetObject(strFilterFileName, assembly);
            return 0;
        ERROR1:
            return -1;
        }



		~~~
		        // 重设密码
        // parameters:
        //      strMessageTempate   消息文字模板。其中可以使用 %name% %barcode% %temppassword% %expiretime% %period% 等宏
        //      strMessage  返回拟发送给读者的消息文字
        // return:
        //      -1  出错
        //      0   因为条件不具备功能没有成功执行
        //      1   功能成功执行
        public int ResetPassword(
            // string strLibraryCodeList,
            string strParameters,
            string strMessageTemplate,
            out string strMessage,
            out string strError)
        {
            strError = "";
            strMessage = "";

            MessageInterface external_interface = this.GetMessageInterface("sms");

            Hashtable parameters = StringUtil.ParseParameters(strParameters, ',', '=');
            string strLoginName = (string)parameters["barcode"];
            string strNameParam = (string)parameters["name"];
            string strTelParam = (string)parameters["tel"];
            string strLibraryCodeList = (string)parameters["librarycode"];  // 控制检索读者记录的范围

            string strStyle = (string)parameters["style"];
            if (StringUtil.IsInList("returnMessage", strStyle) == false)
            {
                // 直接给调用者返回拟发送到手机短信的内容。要求调用者具有特殊权限才行，要求在调用本函数前判断好。
            }
            else
            {
                if (external_interface == null)
                {
                    strError = "当前系统尚未配置短消息 (sms) 接口，无法进行重设密码的操作";
                    return -1;
                }
            }

            if (string.IsNullOrEmpty(strLoginName) == true)
            {
                strError = "缺乏 barcode 参数";
                return -1;
            }
            if (string.IsNullOrEmpty(strNameParam) == true)
            {
                strError = "缺乏 name 参数";
                return -1;
            }
            if (string.IsNullOrEmpty(strTelParam) == true)
            {
                strError = "缺乏 tel 参数";
                return -1;
            }

            // 判断电话号码是否为手机号码
            if (strTelParam.Length != 11)
            {
                strError = "所提供的电话号码应该是 11 位的手机号码";
                return 0;
            }

            string strXml = "";
            string strOutputPath = "";

            byte[] timestamp = null;

            // 临时的SessionInfo对象
            SessionInfo sessioninfo = new SessionInfo(this);
            try
            {
                RmsChannel channel = sessioninfo.Channels.GetChannel(this.WsUrl);
                if (channel == null)
                {
                    strError = "get channel error";
                    return -1;
                }

                bool bTempPassword = false;
                string strToken = "";
                // 获得读者记录
                // return:
                //      -2  当前没有配置任何读者库，或者可以操作的读者库
                //      -1  error
                //      0   not found
                //      1   命中1条
                //      >1  命中多于1条
                int nRet = this.GetReaderRecXmlForLogin(
                    // sessioninfo.Channels,
                    channel,
                    strLibraryCodeList,
                    strLoginName,
                    null,
                    -1,
                    sessioninfo.ClientIP,
                    null,
                    out bTempPassword,
                    out strXml,
                    out strOutputPath,
                    out timestamp,
                    out strToken,
                    out strError);
                if (nRet == -1 || nRet == -2)
                {
                    strError = "以登录名 '" + strLoginName + "' 检索读者记录出错: " + strError;
                    return -1;
                }
                if (nRet == 0)
                {
                    strError = "读者帐户 '" + strLoginName + "' 不存在";
                    return 0;
                }
                if (nRet > 1)
                {
                    strError = "登录名 '" + strLoginName + "' 所匹配的帐户多于一个";
                    return 0;
                }

                Debug.Assert(nRet == 1);

                string strLibraryCode = "";
                // 获得读者库的馆代码
                // return:
                //      -1  出错
                //      0   成功
                nRet = GetLibraryCode(
                    strOutputPath,
                    out strLibraryCode,
                    out strError);
                if (nRet == -1)
                    return -1;

                XmlDocument readerdom = null;
                nRet = LibraryApplication.LoadToDom(strXml,
                    out readerdom,
                    out strError);
                if (nRet == -1)
                {
                    strError = "装载读者记录进入XML DOM时发生错误: " + strError;
                    return -1;
                }

                // 观察 password 元素的 lastResetTime 属性，需在规定的时间长度以外才能再次进行重设

                string strBarcode = DomUtil.GetElementText(readerdom.DocumentElement, "barcode");
                {
                    string strPrefix = "";
                    string strValue = "";
                    // 将登录名切割为前缀和名字值两个部分
                    SplitLoginName(strLoginName,
                out strPrefix,
                out strValue);

                    if (string.IsNullOrEmpty(strPrefix) == true)
                    {
                        // 核对 barcode
                        if (strBarcode.Trim() != strLoginName.Trim())
                        {
                            strError = "证条码号不匹配";
                            return -1;
                        }
                    }
                    if (strPrefix == "EM:") // 注意，整个 strLoginName 应该是 EM:email:xxxxx 这样的形态
                    {
                        // 核对 Email
                        string strEmail = DomUtil.GetElementText(readerdom.DocumentElement, "email");
                        if (StringUtil.SplitList(strEmail).IndexOf(strValue) == -1)
                        {
                            strError = "地址 '" + strValue + "' 不匹配";
                            return -1;
                        }
                    }
                    if (strPrefix == "TP:")
                    {
                        // 核对 电话号码
                        string strTel1 = DomUtil.GetElementText(readerdom.DocumentElement, "tel");
                        if (StringUtil.SplitList(strTel1).IndexOf(strValue) == -1)
                        {
                            strError = "电话号码不匹配";
                            return -1;
                        }
                    }
                    if (strPrefix == "ID:")
                    {
                        // 核对 身份证号
                        string strID = DomUtil.GetElementText(readerdom.DocumentElement, "idCardNumber");
                        if (strID != strValue)
                        {
                            strError = "身份证号不匹配";
                            return -1;
                        }
                    }
                    if (strPrefix == "CN:")
                    {
                        // 核对 身份证号
                        string strCN = DomUtil.GetElementText(readerdom.DocumentElement, "cardNumber");
                        if (strCN != strValue)
                        {
                            strError = "证号不匹配";
                            return -1;
                        }
                    }
                }

                // 核对 name
                string strName = DomUtil.GetElementText(readerdom.DocumentElement, "name");
                if (strName.Trim() != strNameParam.Trim())
                {
                    strError = "姓名不匹配";
                    return 0;
                }

                // 核对 tel
                string strTel = DomUtil.GetElementText(readerdom.DocumentElement, "tel");
                if (string.IsNullOrEmpty(strTel) == true)
                {
                    strError = "读者记录中没有登记电话号码，无法进行重设密码的操作";
                    return 0;
                }

                string strResultTel = ""; ;
                string[] tels = strTel.Split(new char[] { ',', ';' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string tel in tels)
                {
                    string strOneTel = tel.Trim();
                    if (strOneTel == strTelParam.Trim())
                    {
                        strResultTel = strOneTel;
                        break;
                    }
                }

                if (string.IsNullOrEmpty(strResultTel) == true)
                {
                    strError = "所提供的电话号码和读者记录中的电话号码不匹配";
                    return -1;
                }

                DateTime end;
                // 观察在 password 元素 tempPasswordExpire 属性中残留的失效期，必须在这个时间以后才能进行本次操作
                // parameters:
                //      now 当前时间。本地时间
                // return:
                //      -1  出错
                //      0   已经过了失效期
                //      1   还在失效期以内
                nRet = CheckOldExpireTime(readerdom,
                    this.Clock.Now,
                    out end,
                    out strError);
                if (nRet == -1)
                    return -1;
                if (nRet == 1)
                {
                    strError = "本次重设密码的操作距离上次操作间隔不足一小时，操作被拒绝。请在 " + end.ToShortTimeString() + " 以后再进行操作";
                    return 0;
                }

                // 重新设定一个密码
                Random rnd = new Random();
                string strReaderTempPassword = rnd.Next(1, 999999).ToString();

                DateTime expire = this.Clock.Now + new TimeSpan(1, 0, 0);   // 本地时间
                string strExpireTime = DateTimeUtil.Rfc1123DateTimeStringEx(expire);

                if (StringUtil.IsInList("returnMessage", strStyle) == true)
                {
                    // 直接给调用者返回消息内容。消息内容中有临时密码，属于敏感信息，要求调用者具有特殊权限才行。
                    Hashtable table = new Hashtable();
                    table["tel"] = strTelParam;
                    table["barcode"] = strBarcode;
                    table["name"] = strName;
                    table["tempPassword"] = strReaderTempPassword;
                    table["expireTime"] = expire.ToLongTimeString();
                    table["period"] = "一小时";
                    table["refID"] = DomUtil.GetElementText(readerdom.DocumentElement, "refID");    // 在所提供的姓名或者电话号码命中不止一条读者记录的情形，调用者后面使用读者记录的 refID 来绑定特别重要。
                    strMessage = BuildMessageXml(table);
                }
                else
                {
                    if (string.IsNullOrEmpty(strMessageTemplate) == true)
                        strMessageTemplate = "%name% 您好！\n您的读者帐户(证条码号为 %barcode%)已设临时密码 %temppassword%，在 %period% 内登录会成为正式密码";

                    string strBody = strMessageTemplate.Replace("%barcode%", strBarcode)
                        .Replace("%name%", strName)
                        .Replace("%temppassword%", strReaderTempPassword)
                        .Replace("%expiretime%", expire.ToLongTimeString())
                        .Replace("%period%", "一小时");
                    // string strBody = "读者(证条码号) " + strBarcode + " 的帐户密码已经被重设为 " + strReaderNewPassword + "";

                    // 向手机号码发送短信
                    {
                        // 发送消息
                        try
                        {
                            // 发送一条消息
                            // parameters:
                            //      strPatronBarcode    读者证条码号
                            //      strPatronXml    读者记录XML字符串。如果需要除证条码号以外的某些字段来确定消息发送地址，可以从XML记录中取
                            //      strMessageText  消息文字
                            //      strError    [out]返回错误字符串
                            // return:
                            //      -1  发送失败
                            //      0   没有必要发送
                            //      >=1   发送成功，返回实际发送的消息条数
                            nRet = external_interface.HostObj.SendMessage(
                                strBarcode,
                                readerdom.DocumentElement.OuterXml,
                                strBody,
                                strLibraryCode,
                                out strError);
                        }
                        catch (Exception ex)
                        {
                            strError = external_interface.Type + " 类型的外部消息接口Assembly中SendMessage()函数抛出异常: " + ex.Message;
                            nRet = -1;
                        }
                        if (nRet == -1)
                        {
                            strError = "向读者 '" + strBarcode + "' 发送" + external_interface.Type + " message时出错: " + strError;
                            if (this.Statis != null)
                                this.Statis.IncreaseEntryValue(
                                strLibraryCode,
                                "重设密码通知",
                                external_interface.Type + " message 重设密码通知消息发送错误数",
                                1);
                            this.WriteErrorLog(strError);
                            return -1;
                        }
                        else
                        {
                            if (this.Statis != null)
                                this.Statis.IncreaseEntryValue(
            strLibraryCode,
            "重设密码通知",
            external_interface.Type + " message 重设密码通知消息发送数",
            nRet);  // 短信条数可能多于次数
                            if (this.Statis != null)
                                this.Statis.IncreaseEntryValue(strLibraryCode,
                                "重设密码通知",
                                external_interface.Type + " message 重设密码通知人数",
                                1);
                        }
                    }
                }

                byte[] output_timestamp = null;
                nRet = ChangeReaderTempPassword(
        sessioninfo,
        strOutputPath,
        readerdom,
        strReaderTempPassword,
        strExpireTime,
        timestamp,
        out output_timestamp,
        out strError);
                if (nRet == -1)
                    return -1;  // 此时短信已经发出，但临时密码并未修改成功

            }
            finally
            {
                sessioninfo.CloseSession();
                sessioninfo = null;
            }

            if (StringUtil.IsInList("returnMessage", strStyle) == false)
                strError = "临时密码已通过短信方式发送到手机 " + strTelParam + "。请按照手机短信提示进行操作";
            return 1;
        }


		~~~~~~~~~~~~~
		        // 获得系统参数
        // parameters:
        //      strCategory 参数所在目录
        //      strName 参数名
        //      strValue    返回参数值
        // rights:
        //      需要 getsystemparameter 权限
        // return:
        //      result.Value    -1 错误；0 没有得到所要求的参数值；1 得到所要求的参数值
        public LibraryServerResult GetSystemParameter(
            string strCategory,
            string strName,
            out string strValue)
        {
            string strError = "";
            strValue = "";

            LibraryServerResult result = this.PrepareEnvironment("GetSystemParameter", true, true, true);
            if (result.Value == -1)
                return result;

            // 2016/5/3
            // 两个参数都为空的情况，可以用来迫使前端登录一次
            if (string.IsNullOrEmpty(strCategory) == true
                && string.IsNullOrEmpty(strName) == true)
                return result;

            app.LockForRead();
            try
            {
                // 权限判断
                if (StringUtil.IsInList("getsystemparameter", sessioninfo.RightsOrigin) == false
                    && StringUtil.IsInList("order", sessioninfo.RightsOrigin) == false)
                {
                    result.Value = -1;
                    result.ErrorInfo = "获得系统参数的操作被拒绝。不具备 order 或 getsystemparameter 权限。";
                    result.ErrorCode = ErrorCode.AccessDenied;
                    return result;
                }

                int nRet = 1;

                if (strCategory == "listUploadFileNames")
                {
                    try
                    {
                        string strDirectory = Path.Combine(app.DataDir, "upload/" + strName);

                        strDirectory = strDirectory.Replace("\\", "/");
                        if (strDirectory[strDirectory.Length - 1] != '/')
                            strDirectory += "/";

                        // 文件名之间的分隔符为 ||，文件名中，和最后修改时间用 | 间隔
                        List<string> filenames = new List<string>();
                        DirectoryInfo di = new DirectoryInfo(strDirectory);

                        // 列出所有目录名
                        DirectoryInfo[] subs = di.GetDirectories();
                        for (int i = 0; i < subs.Length; i++)
                        {
                            DirectoryInfo sub = subs[i];
                            filenames.Add(MakeFileName(sub));
                            // filenames.AddRange(GetFilenames(sub.FullName, true, true));
                        }

                        // 列出所有文件名
                        FileInfo[] fis = di.GetFiles();
                        foreach (FileInfo fi in fis)
                        {
                            filenames.Add(MakeFileName(fi));
                        }

                        StringBuilder text = new StringBuilder(4096);
                        string strHead = strDirectory;
                        foreach (string strFilename in filenames)
                        {
                            if (text.Length > 0)
                                text.Append("||");

                            text.Append(strFilename);

                            // 只取出相对部分
                            // text.Append(strFilename.Substring(strHead.Length));
                        }

                        strValue = text.ToString();
                        goto END1;
                    }
                    catch (DirectoryNotFoundException ex)
                    {
                        strError = "目录 '" + strName + "' 不存在";
                        goto ERROR1;
                    }
                }

                if (strCategory == "cfgs")
                {
                    // 2015/4/30
                    if (strName == "getDataDir")
                    {
                        strValue = app.DataDir;
                        goto END1;
                    }
                    if (strName == "listFileNames")
                    {
                        List<string> filenames = new List<string>();
                        DirectoryInfo di = new DirectoryInfo(app.DataDir + "/cfgs");
                        DirectoryInfo[] subs = di.GetDirectories();
                        for (int i = 0; i < subs.Length; i++)
                        {
                            DirectoryInfo sub = subs[i];
                            filenames.AddRange(GetFilenames(sub.FullName, false, true));
                        }

                        string strHead = app.DataDir + "/cfgs/";
                        foreach (string strFilename in filenames)
                        {
                            if (string.IsNullOrEmpty(strValue) == false)
                                strValue += ",";
                            // 只取出相对部分
                            strValue += strFilename.Substring(strHead.Length);
                        }

                        goto END1;
                    }
                    if (strName == "listFileNamesEx")
                    {
                        // 文件名之间的分隔符为 ||，文件名中，和最后修改时间用 | 间隔
                        List<string> filenames = new List<string>();
                        DirectoryInfo di = new DirectoryInfo(Path.Combine(app.DataDir, "cfgs"));
                        DirectoryInfo[] subs = di.GetDirectories();
                        for (int i = 0; i < subs.Length; i++)
                        {
                            DirectoryInfo sub = subs[i];
                            filenames.AddRange(GetFilenames(sub.FullName, true, true));
                        }

                        StringBuilder text = new StringBuilder(4096);
                        string strHead = Path.Combine(app.DataDir, "cfgs/");
                        foreach (string strFilename in filenames)
                        {
                            if (text.Length > 0)
                                text.Append("||");
                            // 只取出相对部分
                            text.Append(strFilename.Substring(strHead.Length));
                        }

                        strValue = text.ToString();
                        goto END1;
                    }
#if NO
                    // 取得文件内容
                    if (StringUtil.HasHead(strName, "getfile:") == true)
                    {
                        string strFileName = strName.Substring("getfile:".Length);

                        string strFilePath = app.DataDir + "/cfgs/" + strFileName;

                        Encoding encoding = null;
                        // return:
                        //      -1  出错
                        //      0   文件不存在
                        //      1   文件存在
                        //      2   读入的内容不是全部
                        nRet = FileUtil.ReadTextFileContent(strFilePath,
                            1024 * 1024,    // 1M
                            out strValue,
                            out encoding,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet == 0)
                        {
                            strError = "文件 '" + strFileName + "' 不存在";
                            goto ERROR1;
                        }
                        if (nRet == 2)
                        {
                            strError = "文件 '" + strFileName + "' 尺寸太大";
                            goto ERROR1;
                        }

                        nRet = 1;
                    }
#endif
                }

                // 获得内核配置文件的时间戳?
                if (strCategory == "cfgs/get_res_timestamps")
                {
                    string[] filenames = strName.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries); // RemoveEmptyEntries 2013/12/12
                    // TODO: 
                    RmsChannel channel = sessioninfo.Channels.GetChannel(app.WsUrl);
                    if (channel == null)
                    {
                        strError = "get channel error";
                        goto ERROR1;
                    }
                    StringBuilder text = new StringBuilder(4096);
                    foreach (string filename in filenames)
                    {
                        string strXml = "";
                        string strMetaData = "";
                        byte[] timestamp = null;
                        string strOutputPath = "";
                        long lRet = channel.GetRes(filename,
        "timestamp",
        out strXml,
        out strMetaData,
        out timestamp,
        out strOutputPath,
        out strError);
                        if (lRet == -1)
                        {
                            if (channel.ErrorCode == ChannelErrorCode.NotFound)
                                continue;
                            goto ERROR1;
                        }
                        if (text.Length > 0)
                            text.Append(",");
                        text.Append(filename + "|" + ByteArray.GetHexTimeStampString(timestamp));
                    }
                    strValue = text.ToString();
                    goto END1;
                }

                if (strCategory == "center")
                {
                    if (strName == "def")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("center");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                        {
                            // 将密码变成明文
                            strValue = root.OuterXml;
                            if (string.IsNullOrEmpty(strValue) == false)
                            {
                                XmlDocument temp = new XmlDocument();
                                temp.LoadXml(strValue);
                                XmlNodeList nodes = temp.DocumentElement.SelectNodes("//server");
                                foreach (XmlNode node in nodes)
                                {
                                    string strPassword = DomUtil.GetAttr(node, "password");
                                    strPassword = LibraryApplication.DecryptPassword(strPassword);
                                    DomUtil.SetAttr(node, "password", strPassword);
                                }
                                strValue = temp.DocumentElement.OuterXml;
                            }
                        }

                        goto END1;
                    }

                    strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                    goto NOTFOUND;
                }

                if (strCategory == "system")
                {
                    // 2016/6/25
                    // MSMQ 队列名
                    if (strName == "outgoingQueue")
                    {
                        strValue = app.OutgoingQueue;
                        goto END1;
                    }

                    // 2016/4/6
                    // 获得系统的临时文件目录
                    if (strName == "systemTempDir")
                    {
                        string strTempFileName = Path.GetTempFileName();
                        File.Delete(strTempFileName);
                        strValue = Path.GetDirectoryName(strTempFileName);
                        goto END1;
                    }

                    if (strName == "libraryCodes")
                    {
                        List<string> librarycodes = new List<string>();
                        XmlNodeList nodes = app.LibraryCfgDom.DocumentElement.SelectNodes("readerdbgroup/database");
                        foreach (XmlNode node in nodes)
                        {
                            string strLibraryCode = DomUtil.GetAttr(node, "libraryCode");
                            if (string.IsNullOrEmpty(strLibraryCode) == true)
                                continue;
                            librarycodes.Add(strLibraryCode);
                        }

                        nodes = app.LibraryCfgDom.DocumentElement.SelectNodes("rightsTable/library");
                        foreach (XmlNode node in nodes)
                        {
                            string strLibraryCode = DomUtil.GetAttr(node, "code");
                            if (string.IsNullOrEmpty(strLibraryCode) == true)
                                continue;
                            librarycodes.Add(strLibraryCode);
                        }

                        StringUtil.RemoveDupNoSort(ref librarycodes);
                        strValue = StringUtil.MakePathList(librarycodes);
                        goto END1;
                    }

                    if (strName == "arrived")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("arrived");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                            strValue = root.OuterXml;

                        goto END1;
                    }

                    // 2009/10/23 
                    // 获得<itemdbgroup>元素下级XML
                    if (strName == "biblioDbGroup")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                            // 注: 返回值为0，字符串为空，错误码不是NotFound，表示想关节点找到了，但值为空
                        }
                        else
                        {
                            XmlDocument dom = new XmlDocument();
                            try
                            {
                                dom.LoadXml(root.OuterXml);
                            }
                            catch (Exception ex)
                            {
                                strError = "<itemdbgroup>元素XML片段装入DOM时出错: " + ex.Message;
                                goto ERROR1;
                            }

                            strError = EnsureKdbs(false);
                            if (strError != null)
                                goto ERROR1;

                            // 将name属性名修改为itemDbName属性
                            // TODO: 将来library.xml格式修改后，这部分可以免去了
                            XmlNodeList nodes = dom.DocumentElement.SelectNodes("database");
                            for (int i = 0; i < nodes.Count; i++)
                            {
                                XmlNode node = nodes[i];
                                string strItemDbName = DomUtil.GetAttr(node, "name");
                                DomUtil.SetAttr(node, "name", null);
                                DomUtil.SetAttr(node, "itemDbName", strItemDbName);

                                // 2012/7/2
                                // 加入各个数据库的多语种名字

                                // 实体库
                                AppendCaptions(node, "itemDbName");

                                // 订购库
                                AppendCaptions(node, "orderDbName");

                                // 期库
                                AppendCaptions(node, "issueDbName");

                                // 评注库
                                AppendCaptions(node, "commentDbName");

                                // 书目库
                                AppendCaptions(node, "biblioDbName");
                            }

                            strValue = dom.DocumentElement.InnerXml;
                        }

                        goto END1;
                    }

                    // 2012/9/12
                    // 获得<readerdbgroup>元素下级XML
                    if (strName == "readerDbGroup")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("readerdbgroup");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                            // 注: 返回值为0，字符串为空，错误码不是NotFound，表示相关节点找到了，但值为空
                            goto END1;
                        }

                        if (sessioninfo.GlobalUser == true)
                            strValue = root.InnerXml;
                        else
                        {
                            // 过滤掉当前用户不能管辖的读者库名
                            XmlDocument dom = new XmlDocument();
                            try
                            {
                                dom.LoadXml(root.OuterXml);
                            }
                            catch (Exception ex)
                            {
                                strError = "<readerdbgroup>元素XML片段装入DOM时出错: " + ex.Message;
                                goto ERROR1;
                            }

                            XmlNodeList nodes = dom.DocumentElement.SelectNodes("database");
                            for (int i = 0; i < nodes.Count; i++)
                            {
                                XmlNode node = nodes[i];
                                string strLibraryCode = DomUtil.GetAttr(node, "libraryCode");

                                if (StringUtil.IsInList(strLibraryCode, sessioninfo.LibraryCodeList) == false)
                                {
                                    node.ParentNode.RemoveChild(node);
                                }
                            }

                            strValue = dom.DocumentElement.InnerXml;
                        }

                        goto END1;
                    }

                    strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                    goto NOTFOUND;
                }

                // OPAC检索
                if (strCategory == "opac")
                {
                    // TODO: 和def重复了，需要合并
                    // 获得<virtualDatabases>元素下级XML
                    if (strName == "databases")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("virtualDatabases");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                            strValue = root.InnerXml;

                        goto END1;
                    }

                    // 获得<browseformats>元素下级XML
                    if (strName == "browseformats")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("browseformats");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                            strValue = root.InnerXml;

                        goto END1;
                    }

                    // 2011/2/15
                    if (strName == "serverDirectory")
                    {
                        /*
                        XmlNode node = app.LibraryCfgDom.SelectSingleNode("//opacServer");
                        if (node == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                            strValue = DomUtil.GetAttr(node, "url");
                        */
                        strValue = app.OpacServerUrl;
                        goto END1;
                    }

                    strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                    goto NOTFOUND;
                }

                if (strCategory == "circulation")
                {
                    // 2016/1/1
                    if (strName == "chargingOperDatabase")
                    {
                        if (app.ChargingOperDatabase.Enabled == true)
                            strValue = "enabled";
                        else
                            strValue = "";
                        nRet = 1;
                        goto END1;
                    }

                    // <clientFineInterface>元素内容
                    // strValue中是OuterXml定义。
                    if (strName == "clientFineInterface")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("clientFineInterface");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.OuterXml;
                        nRet = 1;
                        goto END1;
                    }

                    // <valueTables>元素内容
                    // strValue中是下级片断定义，没有<valueTables>元素作为根。
                    if (strName == "valueTables")
                    {
                        // 按照馆代码列表，返回<valueTables>内的适当片断
                        nRet = app.GetValueTablesXml(
                                sessioninfo.LibraryCodeList,
                                out strValue,
                                out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        nRet = 1;
                        goto END1;
                    }

                    // <rightsTable>元素内容
                    // strValue中是下级片断定义，没有<rightsTable>元素作为根。
                    if (strName == "rightsTable")
                    {
#if NO
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("rightsTable");   // 0.02前为rightstable
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
#endif
                        // 按照馆代码列表，返回<rightsTable>内的适当片断
                        nRet = app.GetRightsTableXml(
                                sessioninfo.LibraryCodeList,
                                out strValue,
                                out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        nRet = 1;
                        goto END1;
                    }

                    // (当前<rightsTable>)权限表的HTML形态
                    if (strName == "rightsTableHtml")
                    {
                        nRet = app.GetRightTableHtml(
                            "",
                            sessioninfo.LibraryCodeList,
                            out strValue,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        nRet = 1;
                        goto END1;
                    }

                    /*
                    // 2008/10/10 
                    // <readertypes>元素内容
                    // strValue中是下级片断定义，没有<readertypes>元素作为根。
                    if (strName == "readerTypes")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("rightsTable/readerTypes");   // 0.02前为readertypes
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    // 2008/10/10 
                    // <booktypes>元素内容
                    // strValue中是下级片断定义，没有<booktypes>元素作为根。
                    if (strName == "bookTypes")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("rightsTable/bookTypes"); // 0.02前为booktypes
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }*/

                    // 2008/10/10 
                    // <locationtypes>元素内容
                    // strValue中是下级片断定义，没有<locationTypes>元素作为根。
                    if (strName == "locationTypes")
                    {
#if NO
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("locationTypes"); // 0.02前为locationtypes
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
#endif
                        // 按照馆代码列表，返回<locationTypes>内的适当片断
                        nRet = app.GetLocationTypesXml(
                                sessioninfo.LibraryCodeList,
                                out strValue,
                                out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        nRet = 1;
                        goto END1;
                    }

                    // 2008/10/12 
                    // <zhongcihao>元素内容
                    // strValue中是下级片断定义，没有<zhongcihao>元素作为根。
                    if (strName == "zhongcihao")
                    {
                        // 分馆用户也能看到全部<zhongcihao>定义
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("zhongcihao");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    // 2009/2/18 
                    // <callNumber>元素内容
                    // strValue中是下级片断定义，没有<callNumber>元素作为根。
                    if (strName == "callNumber")
                    {
                        // 分馆用户可以看到全部定义
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("callNumber");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    // 2009/3/9 
                    // <dup>元素内容
                    // strValue中是下级片断定义，没有<dup>元素作为根。
                    if (strName == "dup")
                    {
                        // 分馆用户也能看到全部<dup>定义
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("dup");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    // 2008/10/13 
                    // <script>元素内容
                    // strValue中是下级片断定义，没有<script>元素作为根。
                    if (strName == "script")
                    {
                        // 分馆用户也能看到全部<script>定义
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("script");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                    goto NOTFOUND;
                    /*
                    strError = "(strCategory为 '" + strCategory + "' 时)未知的strName值 '" + strName + "' ";
                    goto ERROR1;
                     * */
                }

                // 根据前端在strName参数中提供的rightstable xml字符串，立即创建rightsTableHtml字符串
                if (strCategory == "instance_rightstable_html")
                {
                    nRet = app.GetRightTableHtml(
                        strName,
                        sessioninfo.LibraryCodeList,
                        out strValue,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    nRet = 1;
                    goto END1;
                }

                // 获得内核数据库原始定义
                if (strCategory == "database_def")
                {
                    // strName参数不能为空。本功能只能得到一个数据库的定义，如果要得到全部数据库的定义，请使用ManageDatabase API的getinfo子功能
                    nRet = app.vdbs.GetDatabaseDef(
                        strName,
                        out strValue,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    goto END1;
                }

                // 实用库
                if (strCategory == "utilDb")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                XmlNodeList nodes = app.LibraryCfgDom.DocumentElement.SelectNodes("//utilDb/database");
                                for (int i = 0; i < nodes.Count; i++)
                                {
                                    string strDbName = DomUtil.GetAttr(nodes[i], "name");
                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        case "types":
                            {
                                XmlNodeList nodes = app.LibraryCfgDom.DocumentElement.SelectNodes("//utilDb/database");
                                for (int i = 0; i < nodes.Count; i++)
                                {
                                    string strType = DomUtil.GetAttr(nodes[i], "type");
                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strType;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }

                    // 2009/10/23 
                    goto END1;
                }

                if (strCategory == "amerce")
                {
                    switch (strName)
                    {
                        case "dbname":
                            strValue = app.AmerceDbName;
                            break;
                        case "overduestyle":
                            strValue = app.OverdueStyle;
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                // 2015/6/13
                if (strCategory == "arrived")
                {
                    switch (strName)
                    {
                        case "dbname":
                            strValue = app.ArrivedDbName;
                            break;
                        default:
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    goto END1;
                }

                if (strCategory == "biblio")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strDbName = app.ItemDbs[i].BiblioDbName;

                                    // 即便数据库名为空，逗号也不能省略。主要是为了准确对位

                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        case "syntaxs":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strSyntax = app.ItemDbs[i].BiblioDbSyntax;

                                    // 即便strSyntax为空，逗号也不能省略。主要是为了准确对位


                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strSyntax;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                if (strCategory == "virtual")
                {
                    switch (strName)
                    {
                        // 2011/1/21
                        case "def":
                            {
                                /*
                                // TODO: 把这个初始化放在正规的初始化中？
                                nRet = app.InitialVdbs(sessioninfo.Channels,
                                    out strError);
                                if (nRet == -1)
                                {
                                    strError = "InitialVdbs error : " + strError;
                                    goto ERROR1;
                                }
                                 * */


                                XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode(
                                    "virtualDatabases");
                                if (root == null)
                                {
                                    strError = "尚未配置<virtualDatabases>元素";
                                    goto ERROR1;
                                }
                                strValue = root.OuterXml;
                            }
                            break;
                        case "dbnames":
                            {
                                /*
                                // TODO: 把这个初始化放在正规的初始化中？
                                nRet = app.InitialVdbs(sessioninfo.Channels,
                                    out strError);
                                if (nRet == -1)
                                {
                                    strError = "InitialVdbs error : " + strError;
                                    goto ERROR1;
                                }
                                 * */

                                if (app.vdbs != null)
                                {
                                    for (int i = 0; i < app.vdbs.Count; i++)
                                    {
                                        VirtualDatabase vdb = app.vdbs[i];
                                        if (vdb.IsVirtual == false)
                                            continue;

                                        if (String.IsNullOrEmpty(strValue) == false)
                                            strValue += ",";
                                        strValue += vdb.GetName("zh");
                                    }
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }


                if (strCategory == "item")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strDbName = app.ItemDbs[i].DbName;

                                    // 即便strDbName为空，逗号也不能省略。主要是为了准确对位

                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                // 2007/10/19 
                if (strCategory == "issue")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strDbName = app.ItemDbs[i].IssueDbName;

                                    // 即便strDbName为空，逗号也不能省略。主要是为了准确对位

                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                // 2007/11/30 
                if (strCategory == "order")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strDbName = app.ItemDbs[i].OrderDbName;

                                    // 即便strDbName为空，逗号也不能省略。主要是为了准确对位

                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                if (strCategory == "reader")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
#if NO
                                for (int i = 0; i < app.ReaderDbs.Count; i++)
                                {
                                    string strDbName = app.ReaderDbs[i].DbName;
                                    if (String.IsNullOrEmpty(strDbName) == true)
                                        continue;

                                    // 2012/9/7
                                    if (string.IsNullOrEmpty(sessioninfo.LibraryCode) == false)
                                    {
                                        string strLibraryCode = app.ReaderDbs[i].LibraryCode;
                                        // 匹配图书馆代码
                                        // parameters:
                                        //      strSingle   单个图书馆代码。空的总是不能匹配
                                        //      strList     图书馆代码列表，例如"第一个,第二个"，或者"*"。空表示都匹配
                                        // return:
                                        //      false   没有匹配上
                                        //      true    匹配上
                                        if (LibraryApplication.MatchLibraryCode(strLibraryCode, sessioninfo.LibraryCode) == false)
                                            continue;
                                    }

                                    if (String.IsNullOrEmpty(strValue) == false)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
#endif
                                List<string> dbnames = app.GetCurrentReaderDbNameList(sessioninfo.LibraryCodeList);
                                strValue = StringUtil.MakePathList(dbnames);
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                if (strCategory == "library")
                {
                    switch (strName)
                    {
                        case "name":
                            {
                                XmlNode node = app.LibraryCfgDom.SelectSingleNode("//libraryName");
                                if (node == null)
                                    strValue = "";
                                else
                                    strValue = node.InnerText;
                            }
                            break;
                        /*
                    case "serverDirectory":
                        {
                            XmlNode node = app.LibraryCfgDom.SelectSingleNode("//libraryserver");
                            if (node == null)
                                strValue = "";
                            else
                                strValue = DomUtil.GetAttr(node, "url");
                        }
                        break;
                         * */
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

            NOTFOUND:
                result.Value = 0;
                result.ErrorCode = ErrorCode.NotFound;  // 表示配置节点没有找到
                if (String.IsNullOrEmpty(strError) == true)
                    result.ErrorInfo = "未知的 category '" + strCategory + "' 和 name '" + strName + "'";
                else
                    result.ErrorInfo = strError;
                return result;

            END1:
                result.Value = nRet;
                return result;
            ERROR1:
                result.Value = -1;
                result.ErrorCode = ErrorCode.SystemError;
                result.ErrorInfo = strError;
                return result;
            }
            catch (Exception ex)
            {
                string strErrorText = "dp2Library GetSystemParameter() API出现异常: " + ExceptionUtil.GetDebugText(ex);
                app.WriteErrorLog(strErrorText);

                result.Value = -1;
                result.ErrorCode = ErrorCode.SystemError;
                result.ErrorInfo = strErrorText;
                return result;
            }
            finally
            {
                app.UnlockForRead();
            }
        }


		~~~

		#if NO
        // 2013/2/26
        // 检查确保 kdbs != null
        string EnsureKdbs(bool bThrowException = true)
        {
            if (app.kdbs == null)
            {
                app.ActivateManagerThreadForLoad();
                string strError = "app.kdbs == null。故障原因请检查dp2Library日志，或稍后重试操作";
                if (bThrowException == true)
                    throw new Exception(strError);

                return strError;
            }

            return null;    // 没有出错
        }
#endif